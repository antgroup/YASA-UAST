name: Release Pipeline

on:
  push:
    tags:
      - 'v*'  # ÊîØÊåÅ v1.0.0 Âíå v1.0.0-beta.1

jobs:
  # 1. ÊèêÂèñÁâàÊú¨ÂíåÂèëÂ∏ÉÈÄöÈÅì
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      npm_tag: ${{ steps.extract.outputs.npm_tag }}
    steps:
      - name: Extract version and tag
        id: extract
        run: |
          echo "üîç Raw GITHUB_REF: $GITHUB_REF"
          tag="${GITHUB_REF#refs/tags/v}"
          echo "üì¶ Extracted version tag: $tag"
          
          echo "version=$tag" >> $GITHUB_OUTPUT
          
          if [[ "$tag" == *"-beta."* ]]; then
            echo "üîñ Detected beta release, using npm tag: beta"
            echo "npm_tag=beta" >> $GITHUB_OUTPUT
          else
            echo "üîñ Detected stable release, using npm tag: latest"
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
          fi

  # 2. ÂèëÂ∏É specification
  publish_spec:
    needs: get_version
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/

      - name: Publish specification
        working-directory: specification
        run: |
          VERSION=${{ needs.get_version.outputs.version }}
          NPM_TAG=${{ needs.get_version.outputs.npm_tag }}
          
          echo "üîç Publishing @ant-yasa/uast-spec"
          echo "üì¶ Version: $VERSION"
          echo "üè∑  NPM Tag: $NPM_TAG"
          echo "üßæ package.json version before: $(cat package.json | grep version)"
          
          # Ê£ÄÊü•ËØ•ÁâàÊú¨ÊòØÂê¶Â∑≤Â≠òÂú®
          if npm view @ant-yasa/uast-spec@$VERSION version > /dev/null 2>&1; then
            echo "‚úÖ Version $VERSION of @ant-yasa/uast-spec already published, skipping."
            exit 0
          fi
          
          # === ÂÆâË£Ö‰æùËµñ ===
          echo "üü¢ Installing dependencies..."
          npm install
          echo "‚úÖ Dependencies installed."
          
          # === ÊûÑÂª∫È°πÁõÆ ===
          echo "üèóÔ∏è  Running build..."
          npm run build
          
          # === È™åËØÅ dist/index.js ÊòØÂê¶ÁîüÊàê ===
          if [ ! -f dist/index.js ]; then
            echo "‚ùå dist/index.js not found after build!"
            echo "üí° Check your build script and .npmignore/.gitignore"
            ls -R dist/ || echo "dist/ is empty or missing"
            exit 1
          fi
          echo "‚úÖ dist/index.js generated successfully."
          
          # === È™åËØÅ npm pack ÊòØÂê¶ÂåÖÂê´ dist/ ===
          echo "üì¶ Running 'npm pack --dry-run' to verify package contents..."
          DRY_RUN_OUTPUT=$(npm pack --dry-run 2>&1)
          echo "$DRY_RUN_OUTPUT"
          
          if echo "$DRY_RUN_OUTPUT" | grep -q "dist/index.js"; then
            echo "‚úÖ dist/index.js is included in the npm package."
          else
            echo "‚ùå dist/index.js is NOT included in the npm package!"
            echo "üí° Check .npmignore and .gitignore ‚Äì make sure 'dist/' is not ignored."
            exit 1
          fi
          
          # === ËÆæÁΩÆÁâàÊú¨Âè∑ ===
          echo "üîÑ Setting version in package.json..."
          npm version $VERSION --no-git-tag-version
          
          # === ÂèëÂ∏ÉÂà∞ npm ===
          echo "üéØ Publishing to npm..."
          npm publish --tag $NPM_TAG
          
          echo "‚úÖ @ant-yasa/uast-spec@$VERSION published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 3. ÂèëÂ∏É parser-Java-Js
  publish_parser_js:
    needs: [publish_spec, get_version]
    runs-on: ubuntu-latest
    environment: release
    env:
      VERSION: ${{ needs.get_version.outputs.version }}
      NPM_TAG: ${{ needs.get_version.outputs.npm_tag }}
    steps:
      - name: Validate version
        run: |
          echo "üéØ VERSION: '$VERSION'"
          echo "üéØ NPM_TAG: '$NPM_TAG'"
          if [ -z "$VERSION" ]; then
            echo "‚ùå ERROR: VERSION is empty!"
            exit 1
          fi
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/

      - name: Check and Publish
        working-directory: parser-Java-Js
        run: |
          echo "üîç Publishing @ant-yasa/uast-parser-java-js"
          echo "üì¶ Version: $VERSION"
          echo "üè∑  NPM Tag: $NPM_TAG"
      
          if npm view @ant-yasa/uast-parser-java-js@$VERSION version > /dev/null 2>&1; then
            echo "‚úÖ Version $VERSION already published, skipping."
            exit 0
          fi

          # Á≠âÂæÖ uast-spec ÂèëÂ∏ÉÂÆåÊàê
          echo "‚è≥ Waiting for @ant-yasa/uast-spec@$VERSION to be available..."
          for i in {1..30}; do
            if npm view @ant-yasa/uast-spec@$VERSION version > /dev/null 2>&1; then
              echo "‚úÖ @ant-yasa/uast-spec@$VERSION is available."
              break
            else
              echo "‚è≥ Attempt $i: @ant-yasa/uast-spec@$VERSION not found, retrying in 10s..."
              sleep 10
            fi
          done

          if ! npm view @ant-yasa/uast-spec@$VERSION version > /dev/null 2>&1; then
            echo "‚ùå Failed to find @ant-yasa/uast-spec@$VERSION after waiting."
            exit 1
          fi
          echo "üì¶ Installing dependencies for @ant-yasa/uast-parser-java-js..."
          npm install

          echo "üì• Installing @ant-yasa/uast-spec@$VERSION..."
          npm install @ant-yasa/uast-spec@$VERSION --no-save

          echo "üèóÔ∏è  Running build..."
          npm run build

          # === Ê†°È™å dist/src/index.js ÊòØÂê¶Â≠òÂú® ===
          echo "üîç Checking for dist/src/index.js..."
          if [ ! -f dist/src/index.js ]; then
            echo "‚ùå dist/src/index.js NOT found!"
            echo "üí° Check your build script, output path, or tsconfig.json"
            ls -R dist/ || echo "dist/ is empty or missing"
            exit 1
          else
            echo "‚úÖ dist/src/index.js exists"
          fi

          # === Ê†°È™å package.json ÁöÑ main Â≠óÊÆµ ===
          MAIN_FIELD=$(node -p "require('./package.json').main")
          echo "üîó package.json 'main' field: $MAIN_FIELD"
          if [ "$MAIN_FIELD" != "dist/src/index.js" ]; then
            echo "‚ö†Ô∏è Warning: 'main' field is not 'dist/src/index.js' ‚Äî may cause runtime issues!"
          fi

          # === dry-run ÊâìÂåÖÔºåÊ£ÄÊü•ÂÜÖÂÆπ ===
          echo "üì¶ Running 'npm pack --dry-run' to verify package contents..."
          DRY_RUN_OUTPUT=$(npm pack --dry-run 2>&1)
          echo "$DRY_RUN_OUTPUT"

          if echo "$DRY_RUN_OUTPUT" | grep -q "dist/src/index.js"; then
            echo "‚úÖ dist/src/index.js is included in the npm package."
          else
            echo "‚ùå dist/src/index.js is NOT included in the npm package!"
            echo "üí° Check .npmignore, .gitignore, or files field in package.json"
            exit 1
          fi

          # === ËÆæÁΩÆÁâàÊú¨Âè∑ ===
          echo "üîÑ Setting version in package.json..."      
          npm version $VERSION --no-git-tag-version
          npm publish --tag $NPM_TAG

          echo "‚úÖ Published @ant-yasa/uast-parser-java-js@$VERSION"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 4. ÊûÑÂª∫ Go ÂèØÊâßË°åÊñá‰ª∂ÔºàÂ§öÂπ≥Âè∞Ôºâ
  build_go:
    needs: publish_parser_js
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # ========== Linux ==========
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: go-linux-amd64
            output_path: parser-Go/dist/uast4go-linux-amd64

          # ========== macOS ==========
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: go-mac-amd64
            output_path: parser-Go/dist/uast4go-mac-amd64

          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: go-mac-arm64
            output_path: parser-Go/dist/uast4go-mac-arm64

          # ========== Windows ==========
          # - os: windows-latest
          #   goos: windows
          #   goarch: amd64
          #   artifact_name: go-windows-amd64
          #   output_path: parser-Go/dist/uast4go-windows-amd64.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Go binary
        working-directory: parser-Go
        shell: bash
        run: |
          export CGO_ENABLED=0
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          [ -n "${{ matrix.goarm }}" ] && export GOARM=${{ matrix.goarm }}

          echo "üèóÔ∏è Building for $GOOS/$GOARCH${GOARM:+/$GOARM}"
          echo "Go version: $(go version)"

          SUFFIX=""
          OUTPUT_NAME="uast4go-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "$GOOS" = "windows" ]; then
            SUFFIX=".exe"
          elif [ "$GOOS" = "darwin" ]; then
            OUTPUT_NAME="uast4go-mac-${{ matrix.goarch }}"
          fi

          go build -o "dist/${OUTPUT_NAME}${SUFFIX}" .
          echo "‚úÖ Built: ${OUTPUT_NAME}${SUFFIX}"

          if [ ! -f "dist/${OUTPUT_NAME}${SUFFIX}" ]; then
            echo "‚ùå Build failed: binary not found!"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.output_path }}

  # 5. ÊûÑÂª∫ Python ÂèØÊâßË°åÊñá‰ª∂ÔºàÂ§öÂπ≥Âè∞Ôºâ
  build_python:
    needs: publish_parser_js
    strategy:
      matrix:
        include:
          - runner: docker
            os: ubuntu-latest
            target: linux
            goos: linux
            goarch: amd64
            artifact_name: python-linux-amd64
            output_path: dist/uast4py-linux-amd64

          - runner: native
            os: macos-latest
            target: mac
            goos: darwin
            goarch: amd64
            artifact_name: python-mac-amd64
            output_path: parser-Python/dist/uast4py-mac-amd64

          - runner: native
            os: macos-latest
            target: mac
            goos: darwin
            goarch: arm64
            artifact_name: python-mac-arm64
            output_path: parser-Python/dist/uast4py-mac-arm64

          # ========== Windows ==========
          # - runner: native
          #   os: windows-latest
          #   target: windows
          #   goos: windows
          #   goarch: amd64
          #   artifact_name: python-windows-amd64
          #   output_path: parser-Python/dist/uast4py-windows-amd64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ========== Linux: Docker ÊûÑÂª∫ ==========
      - name: Build Linux binary with Docker
        run: |
          echo "üê≥ Building Linux binary in container..."
          docker build \
            --build-arg GOOS=${{ matrix.goos }} \
            --build-arg GOARCH=${{ matrix.goarch }} \
            -f parser-Python/Dockerfile.linux \
            -t uast4py-linux .
          
          # ÂàõÂª∫ÂÆπÂô®Âπ∂Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
          docker create --name temp-container uast4py-linux
          
          # Êü•ÁúãÂÆπÂô®ÂÜÖÊñá‰ª∂ÁªìÊûÑÔºàÁî®‰∫éË∞ÉËØïÔºâ
          echo "üìÇ Checking files in container..."
          docker exec temp-container ls -R /app/dist || true

          # Á°Æ‰øù dist ÁõÆÂΩïÂ≠òÂú®‰∏îÊúâ builder Êñá‰ª∂
          mkdir -p dist
          docker cp temp-container:/app/dist/builder dist/uast4py-linux-amd64

          # Ê∏ÖÁêÜ
          docker rm temp-container
          
          # Ê∑ªÂä†ÊùÉÈôê
          chmod +x dist/uast4py-linux-amd64
          echo "‚úÖ Built: dist/uast4py-linux-amd64"


      - name: Upload Linux artifact
        if: ${{ matrix.runner == 'docker' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.output_path }}

      # ========== macOS / Windows: ÂéüÁîüÊûÑÂª∫ ==========
      - name: Setup Python
        if: ${{ matrix.runner == 'native' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Build macOS/Windows binary
        if: ${{ matrix.runner == 'native' }}
        working-directory: parser-Python
        run: |
          echo "üèóÔ∏è Building for ${{ matrix.target }} ${{ matrix.goarch }}"
          python -m venv .venv
          if [ "$RUNNER_OS" = "Windows" ]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          pip install -r requirements.txt
          pip install pyinstaller
          pyinstaller --onefile --paths .venv/lib/python3.13/site-packages uast/builder.py

          mkdir -p dist
          OUTPUT_NAME=""
          if [ "$RUNNER_OS" = "Windows" ]; then
            OUTPUT_NAME="uast4py-windows-${{ matrix.goarch }}"
            mv dist/builder.exe "dist/${OUTPUT_NAME}.exe"
            echo "‚úÖ Built: ${OUTPUT_NAME}.exe"
          else
            OUTPUT_NAME="uast4py-mac-${{ matrix.goarch }}"
            mv dist/builder "dist/${OUTPUT_NAME}"
            echo "‚úÖ Built: ${OUTPUT_NAME}"
          fi
        shell: bash

      - name: Upload artifact
        if: ${{ matrix.runner == 'native' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.output_path }}

  # 6. ÂêàÂπ∂‰∫ßÁâ©Âπ∂ÂàõÂª∫ GitHub Release
  create_release:
    needs: [build_go, build_python]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: releases/
        continue-on-error: true  # Èò≤Ê≠¢Êüê‰∏™ artifact ‰∏ãËΩΩÂ§±Ë¥•ÂØºËá¥‰∏≠Êñ≠

      - name: List downloaded files
        run: |
          echo "üìÇ Downloaded artifacts:"
          find releases -type f

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}
          name: Release ${{ github.ref }}
          artifacts: "releases/**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
