name: Release Pipeline

on:
  push:
    tags:
      - 'v*'  # 支持 v1.0.0 和 v1.0.0-beta.1

jobs:
  # 1. 提取版本和发布通道
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      npm_tag: ${{ steps.extract.outputs.npm_tag }}
    steps:
      - name: Extract version and tag
        id: extract
        run: |
          echo "🔍 Raw GITHUB_REF: $GITHUB_REF"
          tag="${GITHUB_REF#refs/tags/v}"
          echo "📦 Extracted version tag: $tag"
          
          echo "version=$tag" >> $GITHUB_OUTPUT
          
          if [[ "$tag" == *"-beta."* ]]; then
            echo "🔖 Detected beta release, using npm tag: beta"
            echo "npm_tag=beta" >> $GITHUB_OUTPUT
          else
            echo "🔖 Detected stable release, using npm tag: latest"
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
          fi

  # 2. 发布 specification
  publish_spec:
    needs: get_version
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/

      - name: Publish specification
        working-directory: specification
        run: |
          VERSION=${{ needs.get_version.outputs.version }}
          NPM_TAG=${{ needs.get_version.outputs.npm_tag }}
          
          echo "🔍 Publishing @ant-yasa/uast-spec"
          echo "📦 Version: $VERSION"
          echo "🏷  NPM Tag: $NPM_TAG"
          echo "🧾 package.json version before: $(cat package.json | grep version)"
          
          # 检查该版本是否已存在
          if npm view @ant-yasa/uast-spec@$VERSION version > /dev/null 2>&1; then
              echo "✅ Version $VERSION of @ant-yasa/uast-spec already published, skipping."
              exit 0
          fi
          
          echo "🔄 Setting version in package.json..."
          npm version $VERSION --no-git-tag-version
          
          echo "🎯 Publishing to npm..."
          npm publish --tag $NPM_TAG
          
          echo "✅ @ant-yasa/uast-spec@$VERSION published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 3. 发布 parser-Java-Js
  publish_parser_js:
    needs: publish_spec
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/

      - name: Install and Publish parser-Java-Js
        working-directory: parser-Java-Js
        run: |
          VERSION=${{ needs.get_version.outputs.version }}
          NPM_TAG=${{ needs.get_version.outputs.npm_tag }}
          
          echo "🔍 Publishing @ant-yasa/uast-parser-java-js"
          echo "📦 Version: $VERSION"
          echo "🏷  NPM Tag: $NPM_TAG"
          echo "🧾 package.json version before: $(cat package.json | grep version)"
          echo "📦 Dependencies before install:"
          cat package.json | grep "@ant-yasa/uast-spec"
          
          # 检查该版本是否已存在
          if npm view @ant-yasa/uast-parser-java-js@$VERSION version > /dev/null 2>&1; then
            echo "✅ Version $VERSION of @ant-yasa/uast-parser-java-js already published, skipping."
            exit 0
          fi
          
          echo "📥 Installing @ant-yasa/uast-spec@$NPM_TAG (with --no-save)..."
          npm install @ant-yasa/uast-spec@$NPM_TAG --no-save
          
          echo "🔄 Setting version in package.json..."
          npm version $VERSION --no-git-tag-version
          
          echo "🎯 Publishing to npm..."
          npm publish --tag $NPM_TAG
          
          echo "✅ @ant-yasa/uast-parser-java-js@$VERSION published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 4. 构建 Go 可执行文件（多平台）
  build_go:
    needs: publish_parser_js
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    outputs:
      artifacts: ${{ steps.set_output.outputs.artifacts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Go binary
        working-directory: parser-Go
        run: |
          export CGO_ENABLED=0
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          SUFFIX=""
          if [ "$GOOS" = "windows" ]; then SUFFIX=".exe"; fi
          
          echo "🏗️  Building Go binary for $GOOS/$GOARCH"
          echo "Go version: $(go version)"
          echo "GOOS=$GOOS, GOARCH=$GOARCH"
          
          go build -o "uast4go-${GOOS}-${GOARCH}${SUFFIX}" .
          mkdir -p dist
          mv "uast4go-${GOOS}-${GOARCH}${SUFFIX}" dist/
          
          echo "✅ Built: uast4go-${GOOS}-${GOARCH}${SUFFIX}"
        shell: bash  # 显式指定 bash（虽然 Ubuntu/macOS 默认就是，保持一致）

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-${{ matrix.goos }}-${{ matrix.goarch }}
          path: parser-Go/dist/

      - name: Set output
        id: set_output
        run: |
          echo "artifacts=go-${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_OUTPUT

  # 5. 构建 Python 可执行文件（多平台）
  build_python:
    needs: publish_parser_js
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Build Python executable
        working-directory: parser-Python
        run: |
          echo "🏗️  Building Python executable for ${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}"
          echo "Python version: $(python --version)"
          echo "Platform: $RUNNER_OS / $(uname -s)"
          
          python -m venv .venv
          if [ "$RUNNER_OS" = "Windows" ]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          
          pip install -r requirements.txt
          pip install pyinstaller
          
          echo "📦 Running PyInstaller..."
          pyinstaller --onefile --paths .venv/lib/python3.13/site-packages ./uast/builder.py
          
          mkdir -p dist
          if [ "$RUNNER_OS" = "Windows" ]; then
            mv dist/builder.exe "dist/uast4py-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}.exe"
            echo "✅ Built: uast4py-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}.exe"
          else
            mv dist/builder "dist/uast4py-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}"
            echo "✅ Built: uast4py-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}"
          fi
        shell: bash  # ✅ 关键修复：Windows 上使用 bash 而不是 PowerShell

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}
          path: parser-Python/dist/

  # 6. 合并产物并创建 GitHub Release
  create_release:
    needs: [build_go, build_python]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: releases/
        continue-on-error: true  # 防止某个 artifact 下载失败导致中断

      - name: List downloaded files
        run: |
          echo "📂 Downloaded artifacts:"
          find releases -type f

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}
          name: Release ${{ github.ref }}
          artifacts: "releases/**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
